{"cells":[{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":791},"executionInfo":{"elapsed":1918,"status":"ok","timestamp":1717268890296,"user":{"displayName":"Mai Elashry","userId":"08514684747632562066"},"user_tz":-180},"id":"ZjSSYsSLVHGp","outputId":"bad20757-ba71-4f98-8b9f-318275f7812a"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-42-b1bb1d9fdd4a>:22: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n","  uber_data['Requesttime'] = pd.to_datetime(uber_data['Requesttime'], errors='coerce', dayfirst=True)\n","<ipython-input-42-b1bb1d9fdd4a>:23: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n","  uber_data['Droptime'] = pd.to_datetime(uber_data['Droptime'], errors='coerce', dayfirst=True)\n"]},{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6745 entries, 0 to 6744\n","Data columns (total 8 columns):\n"," #   Column        Non-Null Count  Dtype         \n","---  ------        --------------  -----         \n"," 0   Request id    6745 non-null   object        \n"," 1   Pickup point  6745 non-null   object        \n"," 2   Driver id     4095 non-null   object        \n"," 3   Status        6745 non-null   object        \n"," 4   Requestdate   6745 non-null   datetime64[ns]\n"," 5   Requesttime   6745 non-null   datetime64[ns]\n"," 6   Dropdate      2831 non-null   datetime64[ns]\n"," 7   Droptime      2831 non-null   datetime64[ns]\n","dtypes: datetime64[ns](4), object(4)\n","memory usage: 421.7+ KB\n","None\n"]},{"output_type":"execute_result","data":{"text/plain":["     Request id Pickup point  Driver id             Status Requestdate  \\\n","0           619      Airport          1     Trip Completed  11-07-2016   \n","1           867      Airport          1     Trip Completed  11-07-2016   \n","2          1807         City          1     Trip Completed  12-07-2016   \n","3          2532      Airport          1     Trip Completed  12-07-2016   \n","4          3112         City          1     Trip Completed  13-07-2016   \n","...         ...          ...        ...                ...         ...   \n","6740       6745         City  no driver  No Cars Available  15-07-2016   \n","6741       6752      Airport  no driver  No Cars Available  15-07-2016   \n","6742       6751         City  no driver  No Cars Available  15-07-2016   \n","6743       6754         City  no driver  No Cars Available  15-07-2016   \n","6744       6753      Airport  no driver  No Cars Available  15-07-2016   \n","\n","     Requesttime               Dropdate               Droptime  \n","0          11:51             11-07-2016                  13:00  \n","1          17:57             11-07-2016                  18:47  \n","2          09:17             12-07-2016                  09:58  \n","3          21:08             12-07-2016                  22:03  \n","4          08:33             13-07-2016                  09:25  \n","...          ...                    ...                    ...  \n","6740       23:49  trip is not completed  trip is not completed  \n","6741       23:50  trip is not completed  trip is not completed  \n","6742       23:52  trip is not completed  trip is not completed  \n","6743       23:54  trip is not completed  trip is not completed  \n","6744       23:55  trip is not completed  trip is not completed  \n","\n","[6745 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-c32de401-d83d-46b5-ba34-29bd0ee9851c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Request id</th>\n","      <th>Pickup point</th>\n","      <th>Driver id</th>\n","      <th>Status</th>\n","      <th>Requestdate</th>\n","      <th>Requesttime</th>\n","      <th>Dropdate</th>\n","      <th>Droptime</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>619</td>\n","      <td>Airport</td>\n","      <td>1</td>\n","      <td>Trip Completed</td>\n","      <td>11-07-2016</td>\n","      <td>11:51</td>\n","      <td>11-07-2016</td>\n","      <td>13:00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>867</td>\n","      <td>Airport</td>\n","      <td>1</td>\n","      <td>Trip Completed</td>\n","      <td>11-07-2016</td>\n","      <td>17:57</td>\n","      <td>11-07-2016</td>\n","      <td>18:47</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1807</td>\n","      <td>City</td>\n","      <td>1</td>\n","      <td>Trip Completed</td>\n","      <td>12-07-2016</td>\n","      <td>09:17</td>\n","      <td>12-07-2016</td>\n","      <td>09:58</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2532</td>\n","      <td>Airport</td>\n","      <td>1</td>\n","      <td>Trip Completed</td>\n","      <td>12-07-2016</td>\n","      <td>21:08</td>\n","      <td>12-07-2016</td>\n","      <td>22:03</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3112</td>\n","      <td>City</td>\n","      <td>1</td>\n","      <td>Trip Completed</td>\n","      <td>13-07-2016</td>\n","      <td>08:33</td>\n","      <td>13-07-2016</td>\n","      <td>09:25</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6740</th>\n","      <td>6745</td>\n","      <td>City</td>\n","      <td>no driver</td>\n","      <td>No Cars Available</td>\n","      <td>15-07-2016</td>\n","      <td>23:49</td>\n","      <td>trip is not completed</td>\n","      <td>trip is not completed</td>\n","    </tr>\n","    <tr>\n","      <th>6741</th>\n","      <td>6752</td>\n","      <td>Airport</td>\n","      <td>no driver</td>\n","      <td>No Cars Available</td>\n","      <td>15-07-2016</td>\n","      <td>23:50</td>\n","      <td>trip is not completed</td>\n","      <td>trip is not completed</td>\n","    </tr>\n","    <tr>\n","      <th>6742</th>\n","      <td>6751</td>\n","      <td>City</td>\n","      <td>no driver</td>\n","      <td>No Cars Available</td>\n","      <td>15-07-2016</td>\n","      <td>23:52</td>\n","      <td>trip is not completed</td>\n","      <td>trip is not completed</td>\n","    </tr>\n","    <tr>\n","      <th>6743</th>\n","      <td>6754</td>\n","      <td>City</td>\n","      <td>no driver</td>\n","      <td>No Cars Available</td>\n","      <td>15-07-2016</td>\n","      <td>23:54</td>\n","      <td>trip is not completed</td>\n","      <td>trip is not completed</td>\n","    </tr>\n","    <tr>\n","      <th>6744</th>\n","      <td>6753</td>\n","      <td>Airport</td>\n","      <td>no driver</td>\n","      <td>No Cars Available</td>\n","      <td>15-07-2016</td>\n","      <td>23:55</td>\n","      <td>trip is not completed</td>\n","      <td>trip is not completed</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6745 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c32de401-d83d-46b5-ba34-29bd0ee9851c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c32de401-d83d-46b5-ba34-29bd0ee9851c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c32de401-d83d-46b5-ba34-29bd0ee9851c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cc4cf9ce-d357-4564-9378-0c78e5be647d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc4cf9ce-d357-4564-9378-0c78e5be647d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cc4cf9ce-d357-4564-9378-0c78e5be647d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7fb51ab4-b57d-4c48-bd8e-c568ccf960dd\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('uber_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7fb51ab4-b57d-4c48-bd8e-c568ccf960dd button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('uber_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"uber_data","summary":"{\n  \"name\": \"uber_data\",\n  \"rows\": 6745,\n  \"fields\": [\n    {\n      \"column\": \"Request id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6745,\n        \"samples\": [\n          \"2761\",\n          \"1342\",\n          \"44\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pickup point\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"City\",\n          \"Airport\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Driver id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 301,\n        \"samples\": [\n          \"178\",\n          \"290\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Trip Completed\",\n          \"Cancelled\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Requestdate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"12-07-2016\",\n          \"15-07-2016\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Requesttime\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1351,\n        \"samples\": [\n          \"02:36\",\n          \"07:18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dropdate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"11-07-2016\",\n          \"12-07-2016\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Droptime\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1151,\n        \"samples\": [\n          \"12:53\",\n          \"15:24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}],"source":["\n","\n","\n","import pandas as pd\n","\n","# Load the CSV file into a pandas DataFrame\n","import pandas as pd\n","col_types ={'Request id':str ,'Driver id':str}\n","\n","uber_data= pd.read_csv('/content/drive/MyDrive/Data/Uber Request Data.csv',dtype = col_types)\n","\n","\n","uber_data[['Requestdate','Requesttime']] = uber_data['Request timestamp'].str.split(' ',expand= True)\n","uber_data[['Dropdate','Droptime']] = uber_data['Drop timestamp'].str.split(' ',expand= True)\n","uber_data=uber_data.drop('Request timestamp', axis = 1 )\n","uber_data=uber_data.drop('Drop timestamp', axis =1 )\n","\n","uber_data['Requestdate'] = uber_data['Requestdate'].str.replace('/', '.').str.replace('-', '.')\n","uber_data['Dropdate'] = uber_data['Dropdate'].str.replace('/', '.').str.replace('-', '.')\n","uber_data\n","\n","# # Convert the 'date_column' to datetime\n","uber_data['Requestdate'] = pd.to_datetime(uber_data['Requestdate'], errors='coerce', dayfirst=True)\n","uber_data['Dropdate'] = pd.to_datetime(uber_data['Dropdate'], errors='coerce', dayfirst=True)\n","uber_data['Requesttime'] = pd.to_datetime(uber_data['Requesttime'], errors='coerce', dayfirst=True)\n","uber_data['Droptime'] = pd.to_datetime(uber_data['Droptime'], errors='coerce', dayfirst=True)\n","print(uber_data.info())\n","\n","#Change the date format to 'DD-MM-YYYY'\n","\n","uber_data['Requestdate'] = uber_data['Requestdate'].dt.strftime('%d-%m-%Y'or '%d/%m/%Y')\n","uber_data['Dropdate'] = uber_data['Dropdate'].dt.strftime('%d-%m-%Y'or'%d/%m/%Y')\n","uber_data['Requesttime'] = uber_data['Requesttime'].dt.strftime('%H:%M')\n","uber_data['Droptime'] = uber_data['Droptime'].dt.strftime('%H:%M')\n","uber_data.head(50)\n","\n","#replace null values in driver id columns\n","uber_data['Driver id'] = uber_data['Driver id'].fillna('no driver')\n","uber_data['Dropdate'] = uber_data['Dropdate'].fillna('trip is not completed')\n","uber_data['Droptime'] = uber_data['Droptime'].fillna('trip is not completed')\n","uber_data\n","\n"]},{"cell_type":"markdown","source":["# **data analysis and answering of business questions**\n"],"metadata":{"id":"IkidzooSy3yP"}},{"cell_type":"code","source":["\n","# check values from statistical point of view\n","print(uber_data.describe())\n","\n","\n","#number of completed trips\n","completed_trips = uber_data[uber_data['Status'] == 'Trip Completed']\n","num_completed_trips = completed_trips['Status'].count()\n","print(num_completed_trips)\n","\n","#number of negative requests\n","negative_requests = uber_data[uber_data['Status'] != 'Trip Completed']\n","negative_requests = negative_requests['Status'].count()\n","print(negative_requests)\n","\n","#number of drivers avaliable\n","drivers = uber_data[uber_data['Driver id']!='no driver']\n","avaliable_drivers = drivers['Driver id'].nunique()\n","print(avaliable_drivers)\n","\n","# rush time (the common time to request )\n","hour_counts = uber_data['Requesttime'].value_counts()\n","common_requests_time = hour_counts.idxmax()\n","print(common_requests_time)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fCFcZNS6zH4N","executionInfo":{"status":"ok","timestamp":1717270820079,"user_tz":-180,"elapsed":422,"user":{"displayName":"Mai Elashry","userId":"08514684747632562066"}},"outputId":"f915c882-0fc8-4f62-a460-0fcf56cbf103"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["       Request id Pickup point  Driver id          Status Requestdate  \\\n","count        6745         6745       6745            6745        6745   \n","unique       6745            2        301               3           5   \n","top           619         City  no driver  Trip Completed  15-07-2016   \n","freq            1         3507       2650            2831        1381   \n","\n","       Requesttime               Dropdate               Droptime  \n","count         6745                   6745                   6745  \n","unique        1351                      7                   1151  \n","top          18:10  trip is not completed  trip is not completed  \n","freq            17                   3914                   3914  \n","2831\n","3914\n","300\n","18:10\n"]}]},{"cell_type":"markdown","source":["# **visualizations**\n","\n","\n","\n","\n"],"metadata":{"id":"LpFdlYRTUW7W"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","\n","uber_data['Pickup point'].value_counts().plot(kind = 'bar', color = 'blue')\n","plt.title('pickup point')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":522},"id":"nISJNUoJUcII","executionInfo":{"status":"ok","timestamp":1717271865786,"user_tz":-180,"elapsed":421,"user":{"displayName":"Mai Elashry","userId":"08514684747632562066"}},"outputId":"7e661fb6-35d5-4981-cb8f-c38a99000796"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'pickup point')"]},"metadata":{},"execution_count":75},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Histogram\n","plt.hist(uber_data['Status'], bins = 20, color = 'purple', edgecolor = 'red');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"-2-2zRlXYXGb","executionInfo":{"status":"ok","timestamp":1717272013899,"user_tz":-180,"elapsed":360,"user":{"displayName":"Mai Elashry","userId":"08514684747632562066"}},"outputId":"f4d72386-c869-4136-c921-b8047852ee29"},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# pie chart\n","Status = uber_data['Status'].value_counts()\n","\n","plt.pie(\n","    Status,\n","    labels = Status.index,\n","    autopct = '%1.1f%%');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"OJQ-TMnMZeg6","executionInfo":{"status":"ok","timestamp":1717272272584,"user_tz":-180,"elapsed":429,"user":{"displayName":"Mai Elashry","userId":"08514684747632562066"}},"outputId":"ba19adc6-a022-457e-ce20-9e1c8a7229c2"},"execution_count":81,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **insights and recommendetions**"],"metadata":{"id":"MSnRKKFSbb7G"}},{"cell_type":"markdown","source":["* number of completed trips = 2831\n","* number of lost trips = 3194\n","--which mean we have shortage in cars and drivers\n","*supplied > available\n","we should choose more reilable drivers and cars to cover the customers requests and needs\n","* rush hour (18:10)\n","most of requests are ordered in this time we should increase cars to fullfil requests\n","\n"],"metadata":{"id":"xULb-rkZbrHB"}}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1pu-knS2kri_6v9p_OC_hvqmbK3kSkvd0","authorship_tag":"ABX9TyM9AP3TjFnU4Ik60QHhW4Gs"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}